# C√°c th∆∞ vi·ªán chu·∫©nnnnnnn
import tkinter as tk
from tkinter import ttk, messagebox
from datetime import datetime, timedelta
from PIL import Image, ImageTk
import os

import sys
from utils import ToolTip
# Import t·ª´ c√°c file b·∫°n v·ª´a t·∫°o
from database import DatabaseManager
from constants import DAYS_OF_WEEK_VN, FIXED_TIME_SLOTS
from utils import ToolTip, PlaceholderEntry # N·∫øu b·∫°n c√≥ g·ªçi trong App

# Import T·∫§T C·∫¢ c√°c c·ª≠a s·ªï t·ª´ th∆∞ m·ª•c UI
from ui.student_window import StudentWindow
from ui.group_window import GroupWindow
from ui.package_window import PackageWindow
from ui.session_detail_window import SessionDetailWindow
from ui.attendance_report_window import AttendanceReportWindow
from ui.progress_report_window import ProgressReportWindow
from ui.salary_window import SalaryWindow
from ui.skill_rating_window import SkillRatingWindow
from ui.question_bank_window import QuestionBankWindow
from ui.create_test_window import CreateTestWindow
from ui.exercise_manager_window import ExerciseManagerWindow
from ui.assign_exercise_window import AssignExerciseWindow
from ui.assigned_exercise_manager_window import AssignedExerciseManagerWindow
from ui.submit_exercise_window import SubmitExerciseWindow
from ui.submitted_exercise_manager_window import SubmittedExerciseManagerWindow
from ui.student_skill_report_window import StudentSkillReportWindow
from ui.group_suggestion_window import GroupSuggestionWindow
from ui.exercise_suggestion_window import ExerciseSuggestionWindow
from ui.add_exercise_window import AddExerciseWindow
from ui.create_exercise_tree_window import ExerciseTreeManager

# --- C·ª≠a s·ªï ch√≠nh c·ªßa ·ª©ng d·ª•ng ---
class App(tk.Tk):
    # C·ª≠a s·ªï ch√≠nh: hi·ªÉn th·ªã l·ªãch tu·∫ßn v√† truy c·∫≠p c√°c ch·ª©c nƒÉng
    def __init__(self, db_manager):
        super().__init__();
        self.db = db_manager;
        self.title("Ph·∫ßn m·ªÅm Qu·∫£n l√Ω Gia s∆∞ - v3.8");
        self.geometry("1200x800")
        self.style = ttk.Style(self);
        self.style.theme_use("clam")
        self.current_week_start = datetime.now() - timedelta(days=datetime.now().weekday())
        self.last_upcoming_check = None
        self.create_menu()
        main_frame = ttk.Frame(self, padding="5");
        main_frame.pack(fill="both", expand=True)
        left_panel = ttk.Frame(main_frame, width=300, relief="solid", borderwidth=1);
        left_panel.pack(side="left", fill="y", padx=(0, 5));
        left_panel.pack_propagate(False)
        right_panel = ttk.Frame(main_frame, relief="solid", borderwidth=1);
        right_panel.pack(side="right", fill="both", expand=True)
        self.create_right_panel(right_panel)
        self.create_left_panel(left_panel)
        self.update_day_headers()
        self.update_all_schedules()

    # T·∫°o thanh menu tr√™n c√πng: qu·∫£n l√Ω v√† b√°o c√°o
    def create_menu(self):

        menu_bar = tk.Menu(self)
        self.config(menu=menu_bar)
        manage_menu = tk.Menu(menu_bar, tearoff=0)
        manage_menu.add_command(label="üåê M·ªü b·∫£ng ƒëi·ªÅu khi·ªÉn", command=self.open_dashboard)
        menu_bar.add_cascade(label="Qu·∫£n l√Ω", menu=manage_menu)

        manage_menu.add_command(label="Ng√¢n h√†ng c√¢u h·ªèi", command=lambda: QuestionBankWindow(self, self.db))
        manage_menu.add_command(label="G·ª£i √Ω nh√≥m h·ªçc ph√π h·ª£p", command=self.open_group_suggestion)
        manage_menu.add_command(label="H·ªçc sinh...", command=self.open_student_window)
        manage_menu.add_command(label="Nh√≥m h·ªçc...", command=self.open_group_window)
        manage_menu.add_command(label="G√≥i h·ªçc...", command=self.open_package_window)
        manage_menu.add_separator();
        manage_menu.add_command(label="Tho√°t", command=self.quit)


        report_menu = tk.Menu(menu_bar, tearoff=0);
        menu_bar.add_cascade(label="B√°o c√°o", menu=report_menu)
        report_menu.add_command(label="T√≠nh l∆∞∆°ng...", command=self.open_salary_window)  # M·ªõi
        report_menu.add_command(label="Chuy√™n c·∫ßn...", command=self.open_attendance_report)
        report_menu.add_command(label="Ti·∫øn ƒë·ªô...", command=self.open_progress_report)
        report_menu.add_command(label="NƒÉng l·ª±c h·ªçc sinh...", command=self.open_student_skill_report)

        # Menu B√†i t·∫≠p
        exercise_menu = tk.Menu(menu_bar, tearoff=0)
        menu_bar.add_cascade(label="B√†i t·∫≠p", menu=exercise_menu)
        exercise_menu.add_command(label="G·ª£i √Ω theo ƒëi·ªÉm y·∫øu", command=self.open_exercise_suggestion)
        exercise_menu.add_command(label="Th√™m b√†i t·∫≠p", command=self.open_add_exercise)
        exercise_menu.add_command(label="Qu·∫£n l√Ω b√†i t·∫≠p", command=self.open_exercise_manager)
        exercise_menu.add_command(label="üì© Giao b√†i t·∫≠p", command=self.open_assign_exercise)
        exercise_menu.add_command(label="üìã B√†i ƒë√£ giao", command=self.open_assigned_exercises)
        exercise_menu.add_command(label="üì§ N·ªôp b√†i t·∫≠p...", command=self.open_submit_window)
        exercise_menu.add_command(label="üìÇ B√†i ƒë√£ n·ªôp...", command=self.open_submitted_manager)
        manage_menu.add_command(label="‚öôÔ∏è T·∫°o b·∫£ng exercises", command=self.fix_missing_exercises_table)
        exercise_menu.add_command(label="‚úçÔ∏è T·∫°o ƒë·ªÅ thi PDF", command=lambda: CreateTestWindow(self, self.db))
        exercise_menu.add_command(label="üå≤ C√¢y th∆∞ m·ª•c b√†i t·∫≠p", command=self.open_exercise_tree_manager)

    # T·∫°o b·∫£ng ƒëi·ªÅu khi·ªÉn b√™n tr√°i: th·ªùi gian, l·ªãch h√¥m nay, l·ªõp s·∫Øp t·ªõi
    def create_left_panel(self, parent):
        ttk.Label(parent, text="B·∫£ng ƒëi·ªÅu khi·ªÉn", font=("Helvetica", 16, "bold")).pack(pady=10)
        self.clock_label = ttk.Label(parent, font=("Helvetica", 14));
        self.clock_label.pack(pady=10)

        ttk.Separator(parent, orient='horizontal').pack(fill='x', padx=5, pady=10)

        ttk.Label(parent, text="L·ªãch d·∫°y h√¥m nay", font=("Helvetica", 12, "bold")).pack(pady=5)
        self.today_schedule_frame = ttk.Frame(parent);
        self.today_schedule_frame.pack(fill="x", padx=10)

        # KHUNG M·ªöI CHO L·ªöP S·∫ÆP T·ªöI
        self.upcoming_class_frame = ttk.LabelFrame(parent, text="L·ªõp h·ªçc s·∫Øp t·ªõi", padding="10")

        self.upcoming_class_frame.pack(fill="x", padx=10, pady=10)
        ttk.Label(self.upcoming_class_frame, text="Ch∆∞a c√≥ l·ªõp n√†o s·∫Øp di·ªÖn ra.", foreground="gray").pack()

        ttk.Separator(parent, orient='horizontal').pack(fill='x', padx=5, pady=10)
        ttk.Label(parent, text="Th√¥ng b√°o", font=("Helvetica", 12, "bold")).pack(pady=5)
        self.notification_label = ttk.Label(parent, text="S·∫µn s√†ng...", justify="left");
        self.notification_label.pack(padx=10, anchor="w")
        self.update_clock()

    # T·∫°o b·∫£ng l·ªãch tu·∫ßn ·ªü b√™n ph·∫£i
    def create_right_panel(self, parent):
        # Frame ch·ª©a ti√™u ƒë·ªÅ v√† c√°c n√∫t ƒëi·ªÅu khi·ªÉn
        header_frame = ttk.Frame(parent)
        header_frame.pack(pady=5)

        ttk.Button(header_frame, text="< Tu·∫ßn tr∆∞·ªõc", command=lambda: self.change_week(-7)).pack(side="left", padx=10)

        self.week_title_label = ttk.Label(header_frame, text="L·ªãch bi·ªÉu Tu·∫ßn", font=("Helvetica", 16, "bold"))
        self.week_title_label.pack(side="left", padx=10)

        ttk.Button(header_frame, text="Tu·∫ßn sau >", command=lambda: self.change_week(7)).pack(side="left", padx=10)
        ttk.Button(header_frame, text="H√¥m nay", command=self.go_to_today).pack(side="left", padx=10)

        self.schedule_grid_frame = ttk.Frame(parent);
        self.schedule_grid_frame.pack(fill="both", expand=True, padx=10, pady=10)

        self.day_header_context_menu = tk.Menu(self, tearoff=0)
        self.day_header_context_menu.add_command(label="H·ªßy t·∫•t c·∫£ bu·ªïi h·ªçc trong ng√†y",
                                                 command=self.cancel_day_sessions)
        self.clicked_day_info = {}

        self.day_header_labels = []
        for i, day in enumerate(DAYS_OF_WEEK_VN):
            day_lbl = ttk.Label(self.schedule_grid_frame, text=day, font=("Helvetica", 10, "bold"), relief="groove",
                                anchor="center")
            day_lbl.grid(row=0, column=i + 1, sticky="nsew")
            day_lbl.bind("<Button-3>", lambda e, day_idx=i: self.show_day_header_context_menu(e, day_idx))
            self.day_header_labels.append(day_lbl)

        for i, slot in enumerate(FIXED_TIME_SLOTS):
            end_time = (datetime.strptime(slot, "%H:%M") + timedelta(minutes=90)).strftime("%H:%M")
            ttk.Label(self.schedule_grid_frame, text=f"{slot}\n-\n{end_time}", font=("Helvetica", 10, "bold"),
                      relief="groove", anchor="center").grid(row=i + 1, column=0, sticky="nsew")

        self.schedule_grid_frame.grid_columnconfigure(list(range(8)), weight=1)
        self.schedule_grid_frame.grid_rowconfigure(list(range(len(FIXED_TIME_SLOTS) + 1)), weight=1)

        self.session_context_menu = tk.Menu(self, tearoff=0)

    # C·∫≠p nh·∫≠t th·ªùi gian ƒë·ªìng h·ªì v√† l·ªõp s·∫Øp t·ªõi theo th·ªùi gian th·ª±c
    def update_clock(self):
        now = datetime.now()

        if not hasattr(self, 'last_updated_date') or self.last_updated_date != now.date():
            self.update_day_headers()
            self.last_updated_date = now.date()

        # C·∫≠p nh·∫≠t l·ªõp h·ªçc s·∫Øp t·ªõi m·ªói 30 gi√¢y
        if self.last_upcoming_check is None or (now - self.last_upcoming_check).total_seconds() > 30:
            self.update_upcoming_class()
            self.last_upcoming_check = now

        day_of_week_vn = DAYS_OF_WEEK_VN[now.weekday()]
        formatted_string = f"{now.strftime('%H:%M:%S')}\n{day_of_week_vn}, {now.strftime('%d-%m-%Y')}"
        self.clock_label.config(text=formatted_string)
        self.clock_job = self.after(1000, self.update_clock)

    def destroy(self):
        try:
            if hasattr(self, "clock_job"):
                self.after_cancel(self.clock_job)
            if hasattr(self, "schedule_job"):
                self.after_cancel(self.schedule_job)  # h·ªßy v√≤ng l·∫∑p
        except:
            pass
        super().destroy()

    # C·∫≠p nh·∫≠t ti√™u ƒë·ªÅ ng√†y tr√™n l·ªãch theo tu·∫ßn hi·ªán t·∫°i
    def update_day_headers(self):
        start_of_week = self.current_week_start
        end_of_week = start_of_week + timedelta(days=6)

        # C·∫≠p nh·∫≠t ti√™u ƒë·ªÅ tu·∫ßn
        self.week_title_label.config(
            text=f"L·ªãch bi·ªÉu Tu·∫ßn ({start_of_week.strftime('%d/%m')} - {end_of_week.strftime('%d/%m')})")

        today = datetime.now().date()
        style = ttk.Style()
        default_bg = style.lookup('TLabel', 'background')

        for i, lbl in enumerate(self.day_header_labels):
            current_day = start_of_week + timedelta(days=i)
            lbl.config(text=f"{DAYS_OF_WEEK_VN[i]}\n({current_day.strftime('%d/%m')})")

            if current_day.date() == today:
                lbl.config(background="#cce5ff")
            else:
                lbl.config(background=default_bg)

    # L√†m m·ªõi l·ªãch tu·∫ßn + l·ªãch h√¥m nay ƒë·ªãnh k·ª≥ m·ªói 5 gi√¢y
    def update_all_schedules(self):
        self.update_schedule_grid()
        self.update_today_schedule()
        self.schedule_job = self.after(5000, self.update_all_schedules)  # l∆∞u ID

    # V·∫Ω to√†n b·ªô l·ªãch tu·∫ßn d·∫°ng l∆∞·ªõi (c√°c √¥ th·ªùi gian)
    def update_upcoming_class(self):
        for widget in self.upcoming_class_frame.winfo_children():
            widget.destroy()

        now = datetime.now()
        today_vn = DAYS_OF_WEEK_VN[now.weekday()]
        today_str = now.strftime("%Y-%m-%d")

        # L·∫•y l·ªãch h·ªçc h√¥m nay
        query = "SELECT g.name, g.id, s.time_slot FROM schedule s JOIN groups g ON s.group_id = g.id WHERE s.day_of_week = ? ORDER BY s.time_slot"
        today_classes = self.db.execute_query(query, (today_vn,), fetch='all') or []

        next_class_info = None
        # T√¨m l·ªõp h·ªçc ti·∫øp theo trong ng√†y
        for group_name, group_id, time_slot in today_classes:
            class_time = datetime.strptime(f"{today_str} {time_slot}", "%Y-%m-%d %H:%M")
            if class_time > now:
                next_class_info = {'name': group_name, 'id': group_id, 'time': class_time}
                break

        # N·∫øu t√¨m th·∫•y l·ªõp v√† th·ªùi gian ph√π h·ª£p (trong v√≤ng 30 ph√∫t t·ªõi)
        if next_class_info and (next_class_info['time'] - now).total_seconds() <= 1800:  # 30 ph√∫t = 1800 gi√¢y
            self.upcoming_class_frame.config(text=f"L·ªõp s·∫Øp t·ªõi: {next_class_info['name']}")

            # L·∫•y danh s√°ch HS ch√≠nh th·ª©c
            students = self.db.execute_query("SELECT name FROM students WHERE group_id = ?", (next_class_info['id'],),
                                             fetch='all') or []
            for (student_name,) in students:
                ttk.Label(self.upcoming_class_frame, text=f"- {student_name}").pack(anchor="w")

            # L·∫•y danh s√°ch HS h·ªçc b√π
            joiners_query = "SELECT s.name FROM makeup_sessions m JOIN students s ON m.student_id = s.id WHERE m.is_private = 0 AND m.host_group_id = ? AND m.session_date = ?"
            joiners = self.db.execute_query(joiners_query, (next_class_info['id'], today_str), fetch='all') or []
            if joiners:
                ttk.Separator(self.upcoming_class_frame).pack(fill='x', pady=2)
                for (student_name,) in joiners:
                    ttk.Label(self.upcoming_class_frame, text=f"- [B√π] {student_name}").pack(anchor="w")
        else:
            # N·∫øu kh√¥ng c√≥ l·ªõp n√†o s·∫Øp di·ªÖn ra
            self.upcoming_class_frame.config(text="L·ªõp h·ªçc s·∫Øp t·ªõi")
            ttk.Label(self.upcoming_class_frame, text="Ch∆∞a c√≥ l·ªõp n√†o s·∫Øp di·ªÖn ra.", foreground="gray").pack()

    # V·∫Ω 1 √¥ bu·ªïi h·ªçc l√™n l·ªãch tu·∫ßn (g·ªìm tooltip, m√†u, s·ª± ki·ªán)
    def update_schedule_grid(self):
        for widget in self.schedule_grid_frame.winfo_children():
            if widget.grid_info().get('row', 0) > 0 and widget.grid_info().get('column', 0) > 0: widget.destroy()

        start_of_week = self.current_week_start
        end_of_week = start_of_week + timedelta(days=6)

        # 1. L·∫•y d·ªØ li·ªáu cho tu·∫ßn hi·ªán t·∫°i
        cancelled_set = {(g_id, date) for g_id, date in self.db.execute_query(
            "SELECT group_id, cancelled_date FROM cancelled_sessions WHERE cancelled_date BETWEEN ? AND ?",
            (start_of_week.strftime('%Y-%m-%d'), end_of_week.strftime('%Y-%m-%d')), fetch='all') or []}

        # 2. L·∫∑p qua c√°c ng√†y v√† v·∫Ω l·ªãch
        for i, day_vn in enumerate(DAYS_OF_WEEK_VN):
            current_day = start_of_week + timedelta(days=i)
            current_day_str = current_day.strftime('%Y-%m-%d')

            # V·∫Ω c√°c bu·ªïi h·ªçc ch√≠nh th·ª©c
            main_sessions_in_day = self.db.execute_query(
                "SELECT g.name, g.id, s.time_slot FROM schedule s JOIN groups g ON s.group_id=g.id WHERE s.day_of_week = ?",
                (day_vn,), fetch='all') or []
            for group_name, group_id, time_slot in main_sessions_in_day:
                is_cancelled = (group_id, current_day_str) in cancelled_set
                self.add_session_to_grid(day_vn, time_slot, group_name, group_id, current_day, is_cancelled)

            # V·∫Ω c√°c bu·ªïi b√π ri√™ng
            private_makeups_in_day = self.db.execute_query(
                "SELECT s.name, m.time_slot FROM makeup_sessions m JOIN students s ON m.student_id = s.id WHERE m.is_private = 1 AND m.session_date = ?",
                (current_day_str,), fetch='all') or []
            for student_name, time_slot in private_makeups_in_day:
                text = f"[B√π] {student_name}"
                self.add_session_to_grid(day_vn, time_slot, text, None, current_day, False)

    # Hi·ªÉn th·ªã danh s√°ch l·ªõp di·ªÖn ra h√¥m nay b√™n tr√°i
    def add_session_to_grid(self, day_vn, time_slot, text, group_id, session_date, is_cancelled, command=None, tooltip_text=""):
        try:
            row, col = FIXED_TIME_SLOTS.index(time_slot) + 1, DAYS_OF_WEEK_VN.index(day_vn) + 1
            frame = ttk.Frame(self.schedule_grid_frame, relief="solid", borderwidth=1)
            frame.grid(row=row, column=col, sticky="nsew", padx=1, pady=1)

            # üü¶ M√†u n·ªÅn
            color = "#d9d9d9" if is_cancelled else ("#fff0e0" if "[B√π]" in text else "#e0e8f0")
            font_style = ("Helvetica", 9, "italic overstrike") if is_cancelled else ("Helvetica", 9)

            label_text = text  # v√≠ d·ª•: '9.1'

            extra_text = ""
            tooltip = ""

            # N·∫øu l√† bu·ªïi h·ªçc ch√≠nh th·ª©c
            if group_id and not is_cancelled and "[B√π]" not in text:
                # L·∫•y t√™n nh√≥m
                group_name_res = self.db.execute_query("SELECT name FROM groups WHERE id = ?", (group_id,), fetch='one')
                group_name = group_name_res[0] if group_name_res else text

                # üî¢ L·∫•y s·ªë bu·ªïi ƒë√£ h·ªçc trong chu k·ª≥ hi·ªán t·∫°i
                student_sample = self.db.execute_query("SELECT id FROM students WHERE group_id = ? LIMIT 1",
                                                       (group_id,), fetch='one')
                total = self.db.execute_query(
                    "SELECT sessions FROM packages p JOIN students s ON s.package_id = p.id WHERE s.group_id = ? LIMIT 1",
                    (group_id,), fetch='one')
                if student_sample:
                    sid = student_sample[0]
                    start_date = self.db.execute_query("SELECT cycle_start_date FROM students WHERE id = ?", (sid,),
                                                       fetch='one')
                    if start_date and start_date[0]:
                        buoi_hoc = self.db.execute_query("""
                            SELECT COUNT(*) FROM attendance 
                            WHERE group_id = ? AND session_date >= ? AND status = 'C√≥ m·∫∑t'
                        """, (group_id, start_date[0]), fetch='one')[0]
                        total_sessions = total[0] if total else 8
                        extra_text = f"Bu·ªïi {buoi_hoc}/{total_sessions}"

                # üë®‚Äçüè´ L·∫•y danh s√°ch h·ªçc sinh
                hs_list = self.db.execute_query("SELECT name FROM students WHERE group_id = ?", (group_id,),
                                                fetch='all') or []
                tooltip = "H·ªçc sinh:\n" + "\n".join(f"- {h[0]}" for h in hs_list)

                label_text = f"Nh√≥m {group_name}"

            elif "[B√π]" in text:
                # Kh√¥ng can thi·ªáp √¥ h·ªçc b√π
                label_text = text

            # N·ªôi dung hi·ªÉn th·ªã
            lbl = ttk.Label(frame, text=label_text + ("\n" + extra_text if extra_text else ""),
                            anchor="center", background=color, font=font_style, wraplength=120, justify="center")
            lbl.pack(fill="both", expand=True)

            # T·∫°o bi·∫øn l∆∞u th√¥ng tin bu·ªïi h·ªçc
            session_info = {'group_id': group_id, 'group_name': text.split(' ')[0], 'date': session_date,
                            'is_cancelled': is_cancelled}

            # G·∫Øn s·ª± ki·ªán chu·ªôt ph·∫£i ƒë·ªÉ hi·ªán menu context
            lbl.bind("<Button-3>", lambda e, info=session_info: self.show_session_context_menu(e, info))
            frame.bind("<Button-3>", lambda e, info=session_info: self.show_session_context_menu(e, info))

            # G·∫Øn click tr√°i m·ªü chi ti·∫øt
            if not is_cancelled and group_id:
                lbl.bind("<Button-1>",
                         lambda e, d=session_date, gid=group_id, gname=label_text: self.open_session_detail(d, gid,
                                                                                                            gname))
                frame.bind("<Button-1>",
                           lambda e, d=session_date, gid=group_id, gname=label_text: self.open_session_detail(d, gid,
                                                                                                              gname))

            # Tooltip
            if tooltip:
                from utils import ToolTip
                ToolTip(lbl, tooltip)
                ToolTip(frame, tooltip)

        except (ValueError, IndexError):
            pass

    # Hi·ªÉn th·ªã l·ªõp s·∫Øp di·ªÖn ra trong 30 ph√∫t t·ªõi (n·∫øu c√≥)
    def update_today_schedule(self):
        for widget in self.today_schedule_frame.winfo_children(): widget.destroy()
        today_vn, today_date_str = DAYS_OF_WEEK_VN[datetime.now().weekday()], datetime.now().strftime("%Y-%m-%d")

        all_today = []
        # L·∫•y l·ªãch nh√≥m
        for name, slot in self.db.execute_query(
                "SELECT g.name, s.time_slot FROM schedule s JOIN groups g ON s.group_id = g.id WHERE s.day_of_week = ? ORDER BY s.time_slot",
                (today_vn,), fetch='all') or []:
            all_today.append({'time': slot, 'text': f"Nh√≥m {name}"})

        # L·∫•y l·ªãch b√π ri√™ng
        for name, slot in self.db.execute_query(
                "SELECT s.name, m.time_slot FROM makeup_sessions m JOIN students s ON m.student_id=s.id WHERE m.session_date = ? AND m.is_private = 1 ORDER BY m.time_slot",
                (today_date_str,), fetch='all') or []:
            all_today.append({'time': slot, 'text': f"[B√π] {name}"})

        all_today.sort(key=lambda x: x['time'])

        if not all_today:
            ttk.Label(self.today_schedule_frame, text="H√¥m nay kh√¥ng c√≥ l·ªõp.").pack(anchor="w")
            return

        for session in all_today:
            ttk.Label(self.today_schedule_frame, text=f"- {session['time']}: {session['text']}").pack(anchor="w")

    # Hi·ªán menu chu·ªôt ph·∫£i tr√™n bu·ªïi h·ªçc (h·ªßy/ph·ª•c h·ªìi)
    def show_session_context_menu(self, event, session_info):
        self.clicked_session_info = session_info

        context_menu = tk.Menu(self, tearoff=0)
        if session_info['is_cancelled']:
            context_menu.add_command(label="Ph·ª•c h·ªìi bu·ªïi h·ªçc n√†y", command=self.restore_single_session)
        else:
            context_menu.add_command(label="H·ªßy bu·ªïi h·ªçc n√†y", command=self.cancel_single_session)

        context_menu.post(event.x_root, event.y_root)

    # H·ªßy 1 bu·ªïi h·ªçc c·ª• th·ªÉ (th√™m v√†o b·∫£ng cancelled_sessions)
    def show_day_header_context_menu(self, event, day_index):
        self.clicked_day_info = {'day_index': day_index}
        self.day_header_context_menu.post(event.x_root, event.y_root)

    # Ph·ª•c h·ªìi bu·ªïi h·ªçc ƒë√£ b·ªã h·ªßy
    def cancel_single_session(self):
        info = self.clicked_session_info
        group_id, group_name, date = info['group_id'], info['group_name'], info['date']
        date_str = date.strftime('%Y-%m-%d')
        msg = f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën h·ªßy bu·ªïi h·ªçc c·ªßa Nh√≥m {group_name} v√†o ng√†y {date_str} kh√¥ng?\nT·∫•t c·∫£ h·ªçc sinh trong nh√≥m s·∫Ω ƒë∆∞·ª£c ghi nh·∫≠n ngh·ªâ."
        if not messagebox.askyesno("X√°c nh·∫≠n H·ªßy l·ªãch", msg): return
        self._perform_cancellation(group_id, date_str)
        self.update_all_schedules()

    # Hi·ªán menu chu·ªôt ph·∫£i tr√™n ti√™u ƒë·ªÅ ng√†y
    def restore_single_session(self):
        info = self.clicked_session_info
        group_id, group_name, date = info['group_id'], info['group_name'], info['date']
        date_str = date.strftime('%Y-%m-%d')

        msg = f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ph·ª•c h·ªìi bu·ªïi h·ªçc c·ªßa Nh√≥m {group_name} v√†o ng√†y {date_str} kh√¥ng?\n\nC√°c ghi nh·∫≠n 'Ngh·ªâ do GV b·∫≠n' c·ªßa h·ªçc sinh s·∫Ω b·ªã x√≥a."
        if not messagebox.askyesno("X√°c nh·∫≠n Ph·ª•c h·ªìi", msg):
            return

        # 1. X√≥a kh·ªèi b·∫£ng ƒë√£ h·ªßy
        self.db.execute_query("DELETE FROM cancelled_sessions WHERE group_id = ? AND cancelled_date = ?",
                              (group_id, date_str))

        # 2. X√≥a c√°c l∆∞·ª£t ƒëi·ªÉm danh "Ngh·ªâ do GV b·∫≠n" t∆∞∆°ng ·ª©ng
        self.db.execute_query(
            "DELETE FROM attendance WHERE group_id = ? AND session_date = ? AND status = 'Ngh·ªâ do GV b·∫≠n'",
            (group_id, date_str))

        self.update_all_schedules()

    # H·ªßy t·∫•t c·∫£ bu·ªïi h·ªçc trong m·ªôt ng√†y
    def cancel_day_sessions(self):
        day_index = self.clicked_day_info['day_index']
        day_vn = DAYS_OF_WEEK_VN[day_index]
        today = datetime.now();
        start_of_week = today - timedelta(days=today.weekday())
        target_date = start_of_week + timedelta(days=day_index);
        date_str = target_date.strftime('%Y-%m-%d')
        groups_to_cancel = self.db.execute_query(
            "SELECT g.id, g.name FROM schedule s JOIN groups g ON s.group_id = g.id WHERE s.day_of_week=?", (day_vn,),
            fetch='all') or []
        if not groups_to_cancel: messagebox.showinfo("Th√¥ng b√°o",
                                                     f"Kh√¥ng c√≥ l·ªõp n√†o ƒë∆∞·ª£c l√™n l·ªãch v√†o {day_vn} ng√†y {date_str}."); return
        group_names = ", ".join([g[1] for g in groups_to_cancel])
        msg = f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën h·ªßy T·∫§T C·∫¢ c√°c bu·ªïi h·ªçc trong {day_vn} ({date_str}) kh√¥ng?\nC√°c nh√≥m b·ªã ·∫£nh h∆∞·ªüng: {group_names}."
        if not messagebox.askyesno("X√°c nh·∫≠n H·ªßy l·ªãch C·∫£ Ng√†y", msg): return
        for group_id, _ in groups_to_cancel: self._perform_cancellation(group_id, date_str)
        self.update_all_schedules()

    # Ghi nh·∫≠n h·ªçc sinh ngh·ªâ do GV b·∫≠n cho bu·ªïi b·ªã h·ªßy
    def _perform_cancellation(self, group_id, date_str):
        self.db.execute_query("INSERT OR IGNORE INTO cancelled_sessions (group_id, cancelled_date) VALUES (?, ?)",
                              (group_id, date_str))
        for (student_id,) in self.db.execute_query("SELECT id FROM students WHERE group_id = ?", (group_id,),
                                                   fetch='all') or []:
            query = "INSERT INTO attendance (student_id, group_id, session_date, status, make_up_status) VALUES (?, ?, ?, 'Ngh·ªâ do GV b·∫≠n', 'Ch∆∞a s·∫Øp x·∫øp') ON CONFLICT(student_id, group_id, session_date) DO UPDATE SET status = excluded.status, make_up_status = excluded.make_up_status"
            self.db.execute_query(query, (student_id, group_id, date_str))

    def open_exercise_tree_manager(self):
        from ui.create_exercise_tree_window import ExerciseTreeManager
        ExerciseTreeManager(self)

    # M·ªü giao di·ªán ƒëi·ªÉm danh v√† nh·∫≠p ch·ªß ƒë·ªÅ bu·ªïi h·ªçc
    def open_session_detail(self, session_date, group_id=None, group_name=None, makeup_info=None):
        SessionDetailWindow(self, self.db, session_date, group_id=group_id, group_name=group_name,
                            makeup_info=makeup_info)

    # M·ªü c·ª≠a s·ªï qu·∫£n l√Ω h·ªçc sinh
    def open_student_window(self):
        win = StudentWindow(self, self.db);
        win.grab_set()

    # M·ªü c·ª≠a s·ªï qu·∫£n l√Ω nh√≥m h·ªçc
    def open_group_window(self):
        win = GroupWindow(self, self, self.db);
        win.grab_set()

    # M·ªü b√°o c√°o chuy√™n c·∫ßn
    def open_attendance_report(self):
        win = AttendanceReportWindow(self, self.db);
        win.grab_set()

    # M·ªü qu·∫£n l√Ω g√≥i h·ªçc
    def open_progress_report(self):
        win = ProgressReportWindow(self, self.db);
        win.grab_set()

    # M·ªü qu·∫£n l√Ω g√≥i h·ªçc
    def open_package_window(self):
        win = PackageWindow(self, self.db);
        win.grab_set()

    # M·ªü c·ª≠a s·ªï t√≠nh h·ªçc ph√≠ chu k·ª≥
    def open_salary_window(self):
        win = SalaryWindow(self, self.db);
        win.grab_set()

    # M·ªû C·ª¨A S·ªî: H·ªì s∆° nƒÉng l·ª±c h·ªçc sinh
    def open_student_skill_report(self):
        win = StudentSkillReportWindow(self, self.db)
        win.grab_set()

    # M·ªü c·ªßa s·ªï G·ª£i √Ω nh√≥m h·ªçc
    def open_group_suggestion(self):
        win = GroupSuggestionWindow(self, self.db)
        win.grab_set()

    # Chuy·ªÉn tu·∫ßn hi·ªÉn th·ªã l·ªãch theo h∆∞·ªõng tr∆∞·ªõc/sau
    def change_week(self, days):
        self.current_week_start += timedelta(days=days)
        self.update_day_headers()
        self.update_schedule_grid()

    # m·ªü g·ª£i √Ω b√†i t·∫≠p
    def open_exercise_suggestion(self):
        ExerciseSuggestionWindow(self, self.db)

    # M·ªü Th√™m b√†i t·∫≠p
    def open_add_exercise(self):
        AddExerciseWindow(self, self.db)

    # M·ªü Qu·∫£n l√≠ b√†i t·∫≠p
    def open_exercise_manager(self):
        try:
            # üß± Ki·ªÉm tra & t·∫°o b·∫£ng exercises n·∫øu thi·∫øu
            self.db.execute_query("""
                CREATE TABLE IF NOT EXISTS exercises (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    chu_de TEXT,
                    ten_bai TEXT,
                    loai_tap TEXT,
                    noi_dung TEXT,
                    ghi_chu TEXT
                );
            """)
            ExerciseManagerWindow(self, self.db)
        except Exception as e:
            messagebox.showerror("L·ªói CSDL", f"Kh√¥ng th·ªÉ m·ªü qu·∫£n l√Ω b√†i t·∫≠p:\n{e}")

    # Giao B√†i T·∫≠p
    def open_assign_exercise(self):
        AssignExerciseWindow(self, self.db)

    # B√†i t·∫≠p ƒë√£ giao
    def open_assigned_exercises(self):
        AssignedExerciseManagerWindow(self, self.db)

    # N·ªôp b√†i t·∫≠p
    def open_submit_window(self):
        SubmitExerciseWindow(self, self.db)

    # B√†i ƒë√£ n·ªôp
    def open_submitted_manager(self):
        SubmittedExerciseManagerWindow(self, self.db)

    def fix_missing_exercises_table(self):
        self.db.create_exercises_table_if_missing()
        messagebox.showinfo("Xong", "ƒê√£ ki·ªÉm tra v√† t·∫°o b·∫£ng exercises n·∫øu c√≤n thi·∫øu.")

    def open_dashboard(self):
        from main import DashboardWindow  # L∆∞u √Ω: d√πng DashboardWindow, kh√¥ng d√πng Tk n·ªØa
        DashboardWindow(self, self.db)

    # Quay v·ªÅ tu·∫ßn hi·ªán t·∫°i (c√≥ ng√†y h√¥m nay)
    def go_to_today(self):
        self.current_week_start = datetime.now() - timedelta(days=datetime.now().weekday())
        self.update_day_headers()
        self.update_schedule_grid()

class DashboardWindow(tk.Tk):
    def __init__(self, db):
        super().__init__()
        self.db = db
        self.title("üìö B·∫£ng ƒëi·ªÅu khi·ªÉn - Ph·∫ßn m·ªÅm Gia s∆∞")
        self.geometry("1100x750")
        self.configure(bg="#f5f5f5")

        # üìÇ Chia nh√≥m c√°c ch·ª©c nƒÉng
        self.sections = {
            "üìÇ Qu·∫£n l√Ω h·ªçc t·∫≠p": [
                {"label": "H·ªçc sinh", "icon": "assets/icons/students.png", "command": lambda: StudentWindow(self, self.db)},
                {"label": "Nh√≥m h·ªçc", "icon": "assets/icons/groups.png", "command": lambda: GroupWindow(self, self, self.db)},
                {"label": "Chuy√™n c·∫ßn", "icon": "assets/icons/attendance.png", "command": lambda: AttendanceReportWindow(self, self.db)},
                {"label": "L·ªãch d·∫°y", "icon": "assets/icons/calendar.png", "command": lambda: App(self.db)},
            ],
            "üìù B√†i t·∫≠p & C√¢u h·ªèi": [
                {"label": "Giao b√†i", "icon": "assets/icons/assignment.png", "command": lambda: AssignExerciseWindow(self, self.db)},
                {"label": "N·ªôp b√†i", "icon": "assets/icons/submit.png", "command": lambda: SubmitExerciseWindow(self, self.db)},
                {"label": "ƒê√£ n·ªôp", "icon": "assets/icons/submitted.png", "command": lambda: SubmittedExerciseManagerWindow(self, self.db)},
                {"label": "Ng√¢n h√†ng c√¢u h·ªèi", "icon": "assets/icons/question_bank.png", "command": lambda: QuestionBankWindow(self, self.db)},
                {"label": "G·ª£i √Ω b√†i", "icon": "assets/icons/suggest.png", "command": lambda: ExerciseSuggestionWindow(self, self.db)},
                {"label": "T·∫°o ƒë·ªÅ", "icon": "assets/icons/test.png", "command": lambda: CreateTestWindow(self, self.db)},
                {"label": "C√¢y th∆∞ m·ª•c", "icon": "assets/icons/folder.png",
                 "command": lambda: ExerciseTreeManager(self)},
            ],
            "üìä B√°o c√°o & ƒê√°nh gi√°": [
                {"label": "Ti·∫øn ƒë·ªô", "icon": "assets/icons/progress.png", "command": lambda: ProgressReportWindow(self, self.db)},
                {"label": "NƒÉng l·ª±c", "icon": "assets/icons/skill.png", "command": lambda: StudentSkillReportWindow(self, self.db)},
                {"label": "ƒê√°nh gi√°", "icon": "assets/icons/rating.png", "command": lambda: SkillRatingWindow(self, self.db, self.db.get_all_students())},
                {"label": "G·ª£i √Ω nh√≥m", "icon": "assets/icons/group_suggest.png", "command": lambda: GroupSuggestionWindow(self, self.db)},
                {"label": "H·ªçc ph√≠", "icon": "assets/icons/salary.png", "command": lambda: SalaryWindow(self, self.db)},
            ]
        }

        self.build_dashboard()

    def build_dashboard(self):
        # Scrollable dashboard
        canvas = tk.Canvas(self, bg="#f5f5f5")
        scrollbar = tk.Scrollbar(self, orient="vertical", command=canvas.yview)
        scroll_frame = tk.Frame(canvas, bg="#f5f5f5")

        scroll_frame.bind("<Configure>", lambda e: canvas.configure(scrollregion=canvas.bbox("all")))
        canvas.create_window((0, 0), window=scroll_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)

        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")

        for section, items in self.sections.items():
            label = tk.Label(scroll_frame, text=section, font=("Helvetica", 14, "bold"), bg="#f5f5f5", anchor="w")
            label.pack(padx=20, pady=(20, 10), anchor="w")

            group_frame = tk.Frame(scroll_frame, bg="#f5f5f5")
            group_frame.pack(padx=20, pady=10, anchor="w")

            for idx, feat in enumerate(items):
                box = tk.Frame(group_frame, bg="#ffffff", bd=1, relief="raised", padx=10, pady=10)
                box.grid(row=idx // 5, column=idx % 5, padx=10, pady=10)

                try:
                    if os.path.exists(feat["icon"]):
                        img = Image.open(feat["icon"]).resize((64, 64))
                        photo = ImageTk.PhotoImage(img)
                        if not hasattr(self, "photos"):
                            self.photos = []
                        self.photos.append(photo)
                    else:
                        print("‚ùå Kh√¥ng t√¨m th·∫•y ·∫£nh:", feat["icon"])
                        photo = None
                except Exception as e:
                    print("üî• L·ªói ·∫£nh:", e)
                    photo = None

                btn = tk.Button(box,
                                text=feat["label"],
                                image=photo,
                                compound="top",
                                font=("Helvetica", 10, "bold"),
                                width=100,
                                height=100,
                                command=feat["command"],
                                bg="#ffffff")
                btn.pack()

# üî∞ Kh·ªüi ch·∫°y ph·∫ßn m·ªÅm
if __name__ == "__main__":
    db = DatabaseManager()
    app = DashboardWindow(db)
    app.mainloop()
