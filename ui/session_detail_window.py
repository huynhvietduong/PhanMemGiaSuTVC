import tkinter as tk
from tkinter import ttk, messagebox
from datetime import datetime
import os
from tkinter import filedialog
from pathlib import Path
from tkinter import messagebox
from ui.drawing_board_window import DrawingBoardWindow
# Import c·ª≠a s·ªï ƒê√°nh gi√° nƒÉng l·ª±c v√¨ n√≥ ƒë∆∞·ª£c g·ªçi t·ª´ ƒë√¢y
from .skill_rating_window import SkillRatingWindow
class SessionDetailWindow(tk.Toplevel):
    # Giao di·ªán ƒëi·ªÉm danh v√† nh·∫≠p nh·∫≠t k√Ω bu·ªïi h·ªçc
    def __init__(self, parent, db_manager, session_date, group_id=None, group_name=None, makeup_info=None):
        super().__init__(parent)
        self.db = db_manager
        self.is_makeup_session = makeup_info is not None
        self.session_date = session_date.strftime("%Y-%m-%d")  # S·ª≠ d·ª•ng ng√†y ƒë∆∞·ª£c truy·ªÅn v√†o
        self.session_id = None  # ‚úÖ Kh·ªüi t·∫°o lu√¥n ƒë·ªÉ tr√°nh l·ªói AttributeError

        if self.is_makeup_session:
            self.makeup_list = makeup_info
            self.title("Chi ti·∫øt Bu·ªïi h·ªçc b√π")
        else:
            self.group_id = group_id
            self.group_name = group_name
            self.title(f"Chi ti·∫øt Bu·ªïi h·ªçc: Nh√≥m {self.group_name}")

        self.geometry("800x600");
        self.grab_set()
        main_frame = ttk.Frame(self, padding="10");
        main_frame.pack(fill="both", expand=True)
        info_frame = ttk.LabelFrame(main_frame, text="Th√¥ng tin chung ‚ÑπÔ∏è");
        info_frame.pack(fill="x", pady=5)

        if self.is_makeup_session:
            ttk.Label(info_frame, text=f"Bu·ªïi h·ªçc b√π cho {len(self.makeup_list)} h·ªçc sinh").pack(anchor="w")
            ttk.Label(info_frame, text=f"Ng√†y: {self.session_date}").pack(anchor="w")
        else:
            last_session_topic = self.db.execute_query(
                "SELECT topic FROM session_logs WHERE group_id = ? AND session_date < ? ORDER BY session_date DESC LIMIT 1",
                (self.group_id, self.session_date), fetch='one')
            ttk.Label(info_frame, text=f"Nh√≥m: {self.group_name}").pack(anchor="w")
            ttk.Label(info_frame, text=f"Ng√†y: {self.session_date}").pack(anchor="w")
            ttk.Label(info_frame,
                      text=f"Bu·ªïi tr∆∞·ªõc ƒë√£ h·ªçc: {last_session_topic[0] if last_session_topic else 'Ch∆∞a c√≥'}",
                      foreground="blue").pack(anchor="w")

        attendance_frame = ttk.LabelFrame(main_frame, text="ƒêi·ªÉm danh ‚úÖ");
        attendance_frame.pack(fill="both", expand=True, pady=5)
        self.student_vars = {}

        if self.is_makeup_session:
            for info in self.makeup_list:
                self.create_attendance_row(attendance_frame, info['student_id'], info['student_name'])
        else:
            self.makeup_joiners = self.get_makeup_joiners()
            students = self.db.execute_query("SELECT id, name FROM students WHERE group_id = ?", (self.group_id,),
                                             fetch='all') or []
            if not students and not self.makeup_joiners:
                ttk.Label(attendance_frame, text="Ch∆∞a c√≥ h·ªçc sinh n√†o trong nh√≥m n√†y.", foreground="gray").pack(
                    pady=20)
            else:
                for student_id, student_name in students: self.create_attendance_row(attendance_frame, student_id,
                                                                                     student_name)
                if self.makeup_joiners:
                    ttk.Separator(attendance_frame).pack(fill="x", pady=5)
                    for makeup in self.makeup_joiners: self.create_attendance_row(attendance_frame,
                                                                                  makeup['student_id'],
                                                                                  f"[B√π] {makeup['student_name']}")

        log_frame = ttk.LabelFrame(main_frame, text="Nh·∫≠t k√Ω bu·ªïi d·∫°y h√¥m nay ‚úçÔ∏è");
        log_frame.pack(fill="x", pady=5)
        ttk.Label(log_frame, text="Ch·ªß ƒë·ªÅ ƒë√£ d·∫°y:").pack(anchor="w")
        self.topic_text = tk.Text(log_frame, height=3, width=80);
        self.topic_text.pack(fill="x", expand=True, padx=5, pady=2)
        ttk.Label(log_frame, text="B√†i t·∫≠p v·ªÅ nh√†:").pack(anchor="w")
        self.homework_text = tk.Text(log_frame, height=2, width=80);
        self.homework_text.pack(fill="x", expand=True, padx=5, pady=2)
        self.load_today_log()

        btn_frame = ttk.Frame(main_frame);
        btn_frame.pack(pady=10)
        if not self.is_makeup_session:
            ttk.Button(btn_frame, text="ƒê√°nh gi√° nƒÉng l·ª±c", command=self.open_skill_rating).pack(side="left", padx=5)

        ttk.Button(btn_frame, text="üñçÔ∏è B·∫£ng V·∫Ω B√†i Gi·∫£ng", command=self.open_board).pack(side="left", padx=5)
        ttk.Button(btn_frame, text="L∆∞u & K·∫øt th√∫c bu·ªïi h·ªçc",
                   command=self.save_session).pack(side="left", padx=5)

        ttk.Button(log_frame, text="üìÇ Th√™m file b√†i gi·∫£ng", command=self.chon_file_bai_giang).pack(pady=5)
        # üìÅ Danh s√°ch file b√†i gi·∫£ng ƒë√£ l∆∞u
        self.lesson_files_frame = ttk.LabelFrame(log_frame, text="üìé File b√†i gi·∫£ng ƒë√£ g·∫Øn:")
        self.lesson_files_frame.pack(fill="x", pady=5)

        # üîç T·ª± l·∫•y session_id t·ª´ DB n·∫øu ƒë√£ t·ªìn t·∫°i
        self.session_id = None
        if not self.is_makeup_session:
            row = self.db.execute_query(
                "SELECT id FROM session_logs WHERE group_id = ? AND session_date = ?",
                (self.group_id, self.session_date), fetch="one"
            )
            if row:
                self.session_id = row["id"]

        self.render_lesson_files()

    # L·∫•y danh s√°ch h·ªçc sinh h·ªçc b√π v√†o bu·ªïi n√†y
    def get_makeup_joiners(self):
        query = "SELECT m.attendance_id, m.student_id, s.name FROM makeup_sessions m JOIN students s ON m.student_id = s.id WHERE m.host_group_id = ? AND m.session_date = ?"
        return [{'attendance_id': r[0], 'student_id': r[1], 'student_name': r[2]} for r in
                self.db.execute_query(query, (self.group_id, self.session_date), fetch='all') or []]

    # T·∫°o d√≤ng ƒëi·ªÉm danh cho 1 h·ªçc sinh
    def create_attendance_row(self, parent, student_id, display_name):
        row = ttk.Frame(parent);
        row.pack(fill="x", padx=5, pady=2)
        ttk.Label(row, text=display_name, width=25).pack(side="left")
        status_var = tk.StringVar(master=self, value="C√≥ m·∫∑t")
        self.student_vars[student_id] = status_var
        for val in ["C√≥ m·∫∑t", "Ngh·ªâ c√≥ ph√©p", "Ngh·ªâ kh√¥ng ph√©p"]: ttk.Radiobutton(row, text=val, variable=status_var,
                                                                                  value=val).pack(side="left", padx=10)

    # T·∫£i ch·ªß ƒë·ªÅ & b√†i t·∫≠p ƒë√£ ghi tr∆∞·ªõc ƒë√≥ n·∫øu c√≥

    def load_today_log(self):
        group_id_for_log = self.group_id if not self.is_makeup_session else None
        if not group_id_for_log: return
        result = self.db.execute_query(
            "SELECT topic, homework FROM session_logs WHERE group_id = ? AND session_date = ?",
            (group_id_for_log, self.session_date), fetch='one')
        if result: self.topic_text.insert("1.0", result[0] or ""); self.homework_text.insert("1.0", result[1] or "")

    # L∆∞u ƒëi·ªÉm danh + ch·ªß ƒë·ªÅ + b√†i t·∫≠p bu·ªïi h·ªçc
    def save_session(self):
        try:
            makeup_list_to_process = self.makeup_list if self.is_makeup_session else self.makeup_joiners
            for makeup in makeup_list_to_process:
                student_id = makeup['student_id']
                original_att_id = makeup['att_id'] if 'att_id' in makeup else makeup['attendance_id']
                status = self.student_vars[student_id].get()
                new_makeup_status = 'ƒê√£ d·∫°y b√π' if status == "C√≥ m·∫∑t" else 'V·∫Øng bu·ªïi b√π'
                self.db.execute_query("UPDATE attendance SET make_up_status = ? WHERE id = ?",
                                      (new_makeup_status, original_att_id))
                self.db.execute_query("DELETE FROM makeup_sessions WHERE attendance_id = ?", (original_att_id,))

            if not self.is_makeup_session:
                for student_id, status_var in self.student_vars.items():
                    if not any(s['student_id'] == student_id for s in self.makeup_joiners):
                        query = "INSERT INTO attendance (student_id, group_id, session_date, status, make_up_status) VALUES (?, ?, ?, ?, ?) ON CONFLICT(student_id, group_id, session_date) DO UPDATE SET status = excluded.status, make_up_status = excluded.make_up_status"
                        make_up_status = 'Ch∆∞a s·∫Øp x·∫øp' if 'Ngh·ªâ' in status_var.get() else ''
                        self.db.execute_query(query, (student_id, self.group_id, self.session_date, status_var.get(),
                                                      make_up_status))

                topic, homework = self.topic_text.get("1.0", tk.END).strip(), self.homework_text.get("1.0",
                                                                                                     tk.END).strip()
                log_query = "INSERT OR REPLACE INTO session_logs (group_id, session_date, topic, homework) VALUES (?, ?, ?, ?)"
                self.db.execute_query(log_query, (self.group_id, self.session_date, topic, homework))

            messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ l∆∞u th√¥ng tin bu·ªïi h·ªçc.", parent=self)
            self.master.update_all_schedules()
            for win in self.master.winfo_children():
                if hasattr(win, 'load_report'):
                    win.load_report()
                    break
            self.destroy()
        except Exception as e:
            messagebox.showerror("L·ªói L∆∞u Tr·ªØ", f"ƒê√£ c√≥ l·ªói x·∫£y ra khi l∆∞u d·ªØ li·ªáu:\n{e}", parent=self)

    # M·ªü c·ª≠a s·ªï ƒë√°nh gi√° nƒÉng l·ª±c
    def open_skill_rating(self):
        # L·∫•y danh s√°ch h·ªçc sinh trong bu·ªïi h·ªçc
        if self.is_makeup_session:
            student_list = [(info['student_id'], info['student_name']) for info in self.makeup_list]
        else:
            student_list = self.db.execute_query(
                "SELECT id, name FROM students WHERE group_id = ?", (self.group_id,), fetch='all') or []

        # --- L·∫•y ch·ªß ƒë·ªÅ t·ª´ √¥ nh·∫≠p (Text widget) ---
        raw_text = self.topic_text.get("1.0", tk.END).strip()

        # T√°ch th√†nh danh s√°ch c√°c ch·ªß ƒë·ªÅ ri√™ng bi·ªát (ph√¢n t√°ch b·∫±ng d·∫•u ph·∫©y ho·∫∑c ch·∫•m ph·∫©y)
        topics = []
        for part in raw_text.replace(";", ",").split(","):
            topic = part.strip()
            if topic:
                topics.append(topic)

        # G·ªçi giao di·ªán ƒë√°nh gi√° nƒÉng l·ª±c, truy·ªÅn danh s√°ch ch·ªß ƒë·ªÅ
        SkillRatingWindow(self, self.db, student_list, default_topics=topics)

    def create_lesson_directory(base_folder, group_name, session_date):
        date_str = datetime.strptime(session_date, "%Y-%m-%d").strftime("%Y-%m-%d")
        safe_group_name = group_name.replace(" ", "_")
        folder_path = os.path.join(base_folder, "lesson_files", "teacher_001", f"{date_str}_{safe_group_name}")
        os.makedirs(folder_path, exist_ok=True)
        return folder_path

    def chon_file_bai_giang(self):
        file_path = filedialog.askopenfilename(
            title="Ch·ªçn file b√†i gi·∫£ng",
            filetypes=[("T·∫•t c·∫£ c√°c file", "*.*"),
                       ("PDF", "*.pdf"),
                       ("PowerPoint", "*.pptx"),
                       ("Word", "*.docx"),
                       ("EasiNote", "*.enb"),
                       ("OneNote", "*.one")]
        )
        if file_path:
            self.luu_file_bai_giang(file_path)

    def luu_file_bai_giang(self, file_path):
        try:
            if not self.session_id:
                messagebox.showerror("Ch∆∞a l∆∞u bu·ªïi h·ªçc", "Vui l√≤ng l∆∞u bu·ªïi h·ªçc tr∆∞·ªõc khi g·∫Øn file b√†i gi·∫£ng.",
                                     parent=self)
                return

            file_type = Path(file_path).suffix
            title = Path(file_path).stem
            notes = ""

            self.db.add_lesson_file(self.session_id, file_path, file_type, title, notes)
            messagebox.showinfo("‚úÖ Th√†nh c√¥ng", "ƒê√£ l∆∞u file b√†i gi·∫£ng v√†o CSDL.", parent=self)
            self.render_lesson_files()

        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ l∆∞u file b√†i gi·∫£ng: {e}", parent=self)

    def render_lesson_files(self):
        for widget in self.lesson_files_frame.winfo_children():
            widget.destroy()

        if not self.session_id:
            ttk.Label(self.lesson_files_frame, text="‚õî Ch∆∞a c√≥ file b√†i gi·∫£ng.").pack(anchor="w", padx=10)
            return

        rows = self.db.execute_query(
            "SELECT id, file_path, title, file_type FROM lesson_files WHERE session_id = ? ORDER BY id DESC",
            (self.session_id,), fetch='all'
        )

        if not rows:
            ttk.Label(self.lesson_files_frame, text="‚õî Ch∆∞a c√≥ file b√†i gi·∫£ng.").pack(anchor="w", padx=10)
            return

        for row in rows:
            file_path = row["file_path"]
            title = row["title"] or os.path.basename(file_path)
            file_type = (row["file_type"] or "").lower()

            frame = ttk.Frame(self.lesson_files_frame)
            frame.pack(fill="x", padx=5, pady=2)

            ttk.Label(frame, text=title).pack(side="left", anchor="w")

            if file_type == "board" or file_path.endswith(".board.json"):
                ttk.Button(frame, text="üñçÔ∏è M·ªü & S·ª≠a", width=10,
                           command=lambda p=file_path: self.open_board(board_path=p)).pack(side="right")
            else:
                ttk.Button(frame, text="üìÇ M·ªü", width=6,
                           command=lambda p=file_path: self.open_file(p)).pack(side="right")

    def open_file(self, file_path):
        try:
            if os.path.exists(file_path):
                os.startfile(file_path)  # Windows only
            else:
                messagebox.showerror("L·ªói", f"File kh√¥ng t·ªìn t·∫°i:\n{file_path}", parent=self)
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ m·ªü file:\n{e}", parent=self)

    def open_board(self, board_path=None):
        if not self.session_id:
            messagebox.showerror("Ch∆∞a c√≥ bu·ªïi h·ªçc", "Vui l√≤ng l∆∞u bu·ªïi h·ªçc tr∆∞·ªõc khi m·ªü B·∫£ng v·∫Ω.", parent=self)
            return

        lesson_dir = os.path.join(os.getcwd(), "data", "lessons", str(self.session_id))

        def _on_board_saved(path, title):
            # L∆∞u v√†o DB r·ªìi refresh danh s√°ch
            self.db.add_lesson_file(self.session_id, path, "board", title, "")
            self.render_lesson_files()

        win = DrawingBoardWindow(
            self,
            group_name=self.group_name,
            session_date=self.session_date,
            session_id=self.session_id,
            lesson_dir=lesson_dir,
            board_path=board_path,    # None = t·∫°o m·ªõi; c√≥ path = m·ªü ƒë·ªÉ s·ª≠a
            on_saved=_on_board_saved
        )
        win.grab_set()

